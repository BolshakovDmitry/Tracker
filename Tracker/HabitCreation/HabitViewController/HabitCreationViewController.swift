import UIKit

protocol ScheduleSelectionDelegate: AnyObject {
    func didSelectSchedule(_ schedule: [WeekDay])
}

protocol HabitCreationViewControllerDelegate: AnyObject {
    func didCreateTracker(tracker: Tracker, category: String)
}

final class HabitCreationViewController: UIViewController {
    
    // MARK: - Types
    
    // –¢–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    private enum SettingsType: Int, CaseIterable {
        case category
        case schedule
        
        var title: String {
            switch self {
            case .category:
                return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            case .schedule:
                return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            }
        }
    }
    
    // MARK: - public fields
    
    var delegate: HabitCreationViewControllerDelegate?
    var delegateTrackerCoreData: HabitCreationViewControllerDelegate?
    var trackerType: TrackerType = .habit
    
    // MARK: - UI Elements
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.text = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        label.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let nameTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        textField.backgroundColor = UIColor(named: "CustomBackgroundDay")
        textField.layer.cornerRadius = 16
        textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: textField.frame.height))
        textField.leftViewMode = .always
        textField.translatesAutoresizingMaskIntoConstraints = false
        return textField
    }()
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ TableView
   
        private let settingsTableView: UITableView = {
            let tableView = UITableView(frame: .zero, style: .plain)
            tableView.isScrollEnabled = false
            tableView.backgroundColor = UIColor(named: "CustomBackgroundDay")
            tableView.separatorStyle = .none // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            tableView.layer.cornerRadius = 16
            tableView.clipsToBounds = true
            tableView.translatesAutoresizingMaskIntoConstraints = false
            return tableView
        }()

    
    private let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .white
        collectionView.showsVerticalScrollIndicator = false
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    private let cancelButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        button.setTitleColor(.red, for: .normal)
        button.backgroundColor = .white
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.red.cgColor
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private let createButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        button.backgroundColor = .lightGray // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–µ—Ä—ã–π
        button.layer.cornerRadius = 16
        button.translatesAutoresizingMaskIntoConstraints = false
        button.isEnabled = false // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        return button
    }()
    
    // MARK: - Properties
    
    private let emojis = ["üôÇ", "üòª", "üê∂", "üò±", "üòá", "üò°", "ü§î", "üôå", "üçî", "ü•¶", "üèì", "ü•á", "üé∏", "üèù", "üöÄ", "üèÜ", "üéØ", "üß†"]
    
    private let colors: [UIColor] = [
        UIColor(red: 0.20, green: 0.81, blue: 0.41, alpha: 1.0), // #33CF69
        UIColor(red: 1.00, green: 0.40, blue: 0.30, alpha: 1.0), // #FF674D
        UIColor(red: 0.55, green: 0.45, blue: 0.90, alpha: 1.0), // #8D72E6
        UIColor(red: 0.90, green: 0.43, blue: 0.83, alpha: 1.0), // #E66DD4
        UIColor(red: 1.00, green: 0.60, blue: 0.80, alpha: 1.0), // #FF99CC
        UIColor(red: 0.18, green: 0.82, blue: 0.35, alpha: 1.0), // #2FD058
        UIColor(red: 0.43, green: 0.27, blue: 1.00, alpha: 1.0), // #6E44FE
        UIColor(red: 0.21, green: 0.20, blue: 0.49, alpha: 1.0), // #35347C
        UIColor(red: 0.68, green: 0.34, blue: 0.85, alpha: 1.0), // #AD56DA
        UIColor(red: 0.00, green: 0.48, blue: 0.98, alpha: 1.0), // #007BFA
        UIColor(red: 0.27, green: 0.90, blue: 0.62, alpha: 1.0), // #46E69D
        UIColor(red: 0.51, green: 0.17, blue: 0.94, alpha: 1.0), // #832CF1
        UIColor(red: 1.00, green: 0.53, blue: 0.12, alpha: 1.0), // #FF881E
        UIColor(red: 0.20, green: 0.65, blue: 1.00, alpha: 1.0), // #34A7FE
        UIColor(red: 0.47, green: 0.58, blue: 0.96, alpha: 1.0), // #7994F5
        UIColor(red: 0.99, green: 0.30, blue: 0.29, alpha: 1.0), // #FD4C49
        UIColor(red: 0.98, green: 0.83, blue: 0.83, alpha: 1.0), // #F9D4D4
        UIColor(red: 0.96, green: 0.77, blue: 0.55, alpha: 1.0)  // #F6C48B
    ]
    
    private var selectedEmojiIndex: IndexPath?
    private var previousSelectedEmojiIndex: IndexPath? = nil
    private var selectedColorIndex: IndexPath?
    private var selectedCategory: String?
    private var selectedSchedule: [WeekDay] = []
    
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–∫–µ—Ä–∞
        titleLabel.text = trackerType == .habit ? "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞" : "–ù–æ–≤–æ–µ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        
        setupUI()
        setupTableView()
        setupCollectionView()
        setupButtons()
    }
    
    // MARK: - Setup UI
    
    private func setupUI() {
        view.backgroundColor = .white
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω
        view.addSubview(titleLabel)
        view.addSubview(nameTextField)
        view.addSubview(settingsTableView)
        view.addSubview(collectionView)
        view.addSubview(cancelButton)
        view.addSubview(createButton)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã
        NSLayoutConstraint.activate([
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
            titleLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 27),
            titleLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            nameTextField.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 38),
            nameTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            nameTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            nameTextField.heightAnchor.constraint(equalToConstant: 75),
            
            // TableView –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            settingsTableView.topAnchor.constraint(equalTo: nameTextField.bottomAnchor, constant: 24),
            settingsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            settingsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            settingsTableView.heightAnchor.constraint(equalToConstant: trackerType == .habit ? 150 : 75), // –í—ã—Å–æ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –¥–≤—É—Ö —è—á–µ–µ–∫
            
            // CollectionView
            collectionView.topAnchor.constraint(equalTo: settingsTableView.bottomAnchor, constant: 32),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            collectionView.bottomAnchor.constraint(equalTo: cancelButton.topAnchor, constant: -16),
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            cancelButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            cancelButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            cancelButton.heightAnchor.constraint(equalToConstant: 60),
            cancelButton.trailingAnchor.constraint(equalTo: view.centerXAnchor, constant: -8),
            
            // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            createButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            createButton.leadingAnchor.constraint(equalTo: view.centerXAnchor, constant: 8),
            createButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            createButton.heightAnchor.constraint(equalToConstant: 60)
        ])
    }
    
    private func setupTableView() {
        settingsTableView.delegate = self
        settingsTableView.dataSource = self
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫—É
        settingsTableView.register(SettingsTableViewCell.self, forCellReuseIdentifier: "SettingsCell")
        settingsTableView.backgroundColor = UIColor(named: "CustomBackgroundDay")
        settingsTableView.separatorColor = UIColor(named: "CustomGrey")?.withAlphaComponent(0.3)
        settingsTableView.layer.cornerRadius = 16 // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
        settingsTableView.clipsToBounds = true
        settingsTableView.tableFooterView = UIView()
    }
    
    private func setupCollectionView() {
        collectionView.delegate = self
        collectionView.dataSource = self
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        collectionView.register(EmojiCollectionViewCell.self, forCellWithReuseIdentifier: "EmojiCell")
        collectionView.register(ColorCollectionViewCell.self, forCellWithReuseIdentifier: "ColorCell")
        collectionView.register(
            TrackerHeaderView.self,
            forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: "HeaderView"
        )
    }
    
    private func setupButtons() {
        createButton.addTarget(self, action: #selector(createButtonTapped), for: .touchUpInside)
        cancelButton.addTarget(self, action: #selector(cancelButtonTapped), for: .touchUpInside)
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ
        updateCreateButtonState()
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        nameTextField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    private func updateCreateButtonState() {
        let isTextValid = (nameTextField.text?.count ?? 0) >= 4
        let isCategorySelected = selectedCategory != nil
        let isScheduleSelected = trackerType == .irregularEvent || !selectedSchedule.isEmpty
        let isEmojiSelected = selectedEmojiIndex != nil
        let isColorSelected = selectedColorIndex != nil
        
        let isFormValid = isTextValid && isCategorySelected && isScheduleSelected && isEmojiSelected && isColorSelected
        
        createButton.isEnabled = isFormValid
        createButton.backgroundColor = isFormValid ? .black : .lightGray
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    @objc private func textFieldDidChange(_ textField: UITextField) {
        updateCreateButtonState()
    }
    
    // MARK: - Actions + –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    
    @objc private func createButtonTapped() {
        guard
            let text = nameTextField.text, !text.isEmpty,
            let emojiIndex = selectedEmojiIndex?.item,
            let colorIndex = selectedColorIndex?.item
        else {
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è")
            return
        }
        
        let selectedEmoji = emojis[emojiIndex]
        let selectedColor = colors[colorIndex]
        
        // –î–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        let schedule = trackerType == .habit ? selectedSchedule : WeekDay.allCases
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        let newTracker = Tracker(name: text, color: selectedColor, emoji: selectedEmoji, schedule: schedule, type: trackerType)
        
        delegateTrackerCoreData?.didCreateTracker(tracker: newTracker, category: selectedCategory ?? "No category")
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        print("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä: \(newTracker)")
        
        let previousVC = self.presentingViewController
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±–∞ —ç–∫—Ä–∞–Ω–∞
        dismiss(animated: true) {
            // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è HabitCreationViewController –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ TrackerTypesViewController
            previousVC?.dismiss(animated: true)
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
    private func formattedSchedule(_ weekDays: [WeekDay]) -> String {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ 7 –¥–Ω–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
        if weekDays.count == 7 {
            return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        let sortedDays = weekDays.sorted { $0.rawValue < $1.rawValue }
        let shortNames = sortedDays.map { shortName(for: $0) }
        return shortNames.joined(separator: ", ")
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    private func shortName(for weekDay: WeekDay) -> String {
        switch weekDay {
        case .monday: return "–ü–Ω"
        case .tuesday: return "–í—Ç"
        case .wednesday: return "–°—Ä"
        case .thursday: return "–ß—Ç"
        case .friday: return "–ü—Ç"
        case .saturday: return "–°–±"
        case .sunday: return "–í—Å"
        }
    }
    
    @objc private func cancelButtonTapped() {
        dismiss(animated: true)
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —è—á–µ–π–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private func showCategoryViewController() {
       
        let viewModel = CategoriesViewModel()
        let categoryVC = CategoriesViewController(viewModel: viewModel)
        let trackerCategoryStore = TrackerCategoryStore(delegate: viewModel)
        
        viewModel.model = trackerCategoryStore
        categoryVC.delegate = self
        
        categoryVC.modalPresentationStyle = .pageSheet
        
        present(categoryVC, animated: true)
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —è—á–µ–π–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    private func showScheduleViewController() {
       
        let scheduleVC = ScheduleViewController()
           scheduleVC.delegate = self
           
           // –°–æ–∑–¥–∞–µ–º navigation controller —Å scheduleVC –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ
           let navController = UINavigationController(rootViewController: scheduleVC)
           
           // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º presentation style (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .pageSheet –∏–ª–∏ .formSheet)
           navController.modalPresentationStyle = .pageSheet
           
           // –ü—Ä–µ–∑–µ–Ω—Ç—É–µ–º navigation controller
           present(navController, animated: true)
       }
}

// MARK: - UITableViewDelegate, UITableViewDataSource

extension HabitCreationViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        trackerType == .habit ? SettingsType.allCases.count : 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SettingsCell", for: indexPath) as? SettingsTableViewCell
        
        // –î–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let settingsTypeIndex = trackerType == .habit ? indexPath.row : SettingsType.category.rawValue
        
        guard let settingsType = SettingsType(rawValue: settingsTypeIndex), let cell = cell else {
            return UITableViewCell()
        }
        
        var value: String?
        
        switch settingsType {
        case .category:
            value = selectedCategory
        case .schedule:
            value = selectedSchedule.isEmpty ? nil : formattedSchedule(selectedSchedule)
        }
        
        let isLast: Bool = false
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä
        if indexPath.row == (trackerType == .habit ? SettingsType.allCases.count - 1 : 0) {
            
                cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        } else {
           
            let customSeparator = UIView(frame: CGRect(x: 16, y: cell.frame.height - 2, width: cell.frame.width - 32, height: 0.5))
            customSeparator.backgroundColor = UIColor(named: "YP Grey")
            cell.contentView.addSubview(customSeparator)
        }
        
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —è—á–µ–π–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ configure
        cell.configure(with: settingsType.title, value: value, isLast: isLast)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        // –î–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let settingsTypeIndex = trackerType == .habit ? indexPath.row : SettingsType.category.rawValue
        
        guard let settingsType = SettingsType(rawValue: settingsTypeIndex) else {
            return
        }
        
        switch settingsType {
        case .category:
            showCategoryViewController()
        case .schedule:
            showScheduleViewController()
        }
    }
    

    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75 // –í—ã—Å–æ—Ç–∞ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // –£–±–∏—Ä–∞–µ–º —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä —É –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–∏
        if indexPath.row == SettingsType.allCases.count - 1 || trackerType == .irregularEvent {
            cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: .greatestFiniteMagnitude)
        }
        
    }
}

// MARK: - UICollectionViewDelegate, UICollectionViewDataSource

extension HabitCreationViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return section == 0 ? emojis.count : colors.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if indexPath.section == 0 {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "EmojiCell", for: indexPath) as? EmojiCollectionViewCell else {
                return UICollectionViewCell()
            }
            cell.configure(with: emojis[indexPath.item])
            cell.isSelected = false
            return cell
        } else {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ColorCell", for: indexPath) as? ColorCollectionViewCell else {
                return UICollectionViewCell()
            }
            
            cell.configure(with: colors[indexPath.item])
            cell.isSelected = indexPath == selectedColorIndex
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        if indexPath.section == 0 {
            // –í—ã–±—Ä–∞–Ω —ç–º–æ–¥–∑–∏
            
            if previousSelectedEmojiIndex == nil {
                
                // –∫—Ä–∏–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á—Ç–æ–±—ã —Å–æ—Ö—Ä–æ–Ω—è–ª–∏—Å—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏–π
                let cell = collectionView.cellForItem(at: indexPath) as? EmojiCollectionViewCell
                cell?.isSelected = true
                selectedEmojiIndex = indexPath
                previousSelectedEmojiIndex = indexPath
            } else {
                guard let previousSI = previousSelectedEmojiIndex else { return }
                let cell = collectionView.cellForItem(at: previousSI) as? EmojiCollectionViewCell
                cell?.isSelected = false
                previousSelectedEmojiIndex = indexPath
                selectedEmojiIndex = indexPath
            }
        } else {
            // –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç
            let cell = collectionView.cellForItem(at: indexPath) as? ColorCollectionViewCell
            cell?.isSelected = true
            selectedColorIndex = indexPath
            guard let index2 = selectedEmojiIndex else { return }
            let cell2 = collectionView.cellForItem(at: index2) as? EmojiCollectionViewCell
            cell2?.isSelected = true
            
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        updateCreateButtonState()
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        if kind == UICollectionView.elementKindSectionHeader {
            guard let headerView = collectionView.dequeueReusableSupplementaryView(
                ofKind: kind,
                withReuseIdentifier: "HeaderView",
                for: indexPath
            ) as? TrackerHeaderView else {
                return UICollectionReusableView()
            }
            
            let title = indexPath.section == 0 ? "Emoji" : "–¶–≤–µ—Ç"
            headerView.configure(with: title)
            return headerView
        }
        return UICollectionReusableView()
    }
}

// MARK: - UICollectionViewDelegateFlowLayout

extension HabitCreationViewController: UICollectionViewDelegateFlowLayout {
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    private struct LayoutConstants {
        static let itemSize: CGFloat = 52
        static let interitemSpacing: CGFloat = 5
        static let lineSpacing: CGFloat = 0
        static let sectionInsets = UIEdgeInsets(top: 0, left: 0, bottom: 10, right: 0)
        static let headerHeight: CGFloat = 40
    }
    
    func collectionView(_ collectionView: UICollectionView,
                       layout collectionViewLayout: UICollectionViewLayout,
                       sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: LayoutConstants.itemSize, height: LayoutConstants.itemSize)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                       layout collectionViewLayout: UICollectionViewLayout,
                       minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return LayoutConstants.interitemSpacing
    }
    
    func collectionView(_ collectionView: UICollectionView,
                       layout collectionViewLayout: UICollectionViewLayout,
                       minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return LayoutConstants.lineSpacing
    }
    
    func collectionView(_ collectionView: UICollectionView,
                       layout collectionViewLayout: UICollectionViewLayout,
                       insetForSectionAt section: Int) -> UIEdgeInsets {
        return LayoutConstants.sectionInsets
    }
    
    func collectionView(_ collectionView: UICollectionView,
                       layout collectionViewLayout: UICollectionViewLayout,
                       referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: LayoutConstants.headerHeight)
    }
}

// MARK: - CategorySelectionDelegate

extension HabitCreationViewController: CategoriesSelectionDelegate {
    func didSelectCategory(_ category: String) {
        selectedCategory = category
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        settingsTableView.reloadRows(at: [IndexPath(row: SettingsType.category.rawValue, section: 0)], with: .none)
        updateCreateButtonState()
    }
}

extension HabitCreationViewController: ScheduleSelectionDelegate {
    func didSelectSchedule(_ schedule: [WeekDay]) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        selectedSchedule = schedule
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        settingsTableView.reloadRows(at: [IndexPath(row: SettingsType.schedule.rawValue, section: 0)], with: .none)
        
        updateCreateButtonState()
    }
}

